
Tile[][] tiles;

int w = 800; // Breite des Spielfeldes
int h = 512; // Höhe des Spielfeldes
int sprite_map_size = 16; // höhe & Breite einer Kachel
int sprite_size = 32; // höhe & Breite einer Kachel
int nx = w / sprite_size; // Wieviele Kacheln liegen nebeneinander 25
int ny = h/sprite_size; // 16 Wievile Kacheln liegen übereinander 16
PImage map;
PC pc;
int GO_DOWN=0;
int GO_RIGHT=1;
int GO_LEFT=2;
int GO_UP=3;
int animation_counter=0;
int[][] level0 = {
   {166, 166, 166, 166, 166, 166, 166, 171, 166, 166, 166, 166, 166, 166, 166, 172, 166, 166, 166, 166, 166, 166, 166, 168, 166},
   {166, 166, 166, 166, 166, 166, 166, 169, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 168, 166, 167, 166, 166, 166, 166},
   {166, 166, 166, 169, 170, 167, 166, 166, 166, 166, 166, 171, 166, 166, 166, 166, 166, 166, 166, 169, 166, 166, 166, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 166, 172, 166, 166, 169, 166, 166, 166, 166, 172, 166, 166, 166, 166, 166, 166, 166, 166},
   {166, 171, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 168, 166, 166, 166, 171, 166, 166, 166, 166, 166, 166, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 167, 166, 166, 166, 166, 166, 166, 166, 13, 14, 14, 14, 14, 14, 14, 15, 166, 166},
   {166, 166, 167, 166, 171, 166, 166, 166, 166, 166, 172, 166, 166, 166, 166, 53, 54, 54, 54, 54, 54, 54, 55, 166, 166},
   {166, 166, 166, 171, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 53, 54, 54, 54, 54, 54, 54, 55, 166, 166},
   {166, 166, 166, 166, 166, 167, 166, 166, 166, 166, 168, 166, 374, 166, 166, 53, 54, 54, 54, 54, 54, 54, 55, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 53, 54, 54, 54, 54, 54, 54, 55, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 172, 166, 93, 94, 94, 94, 94, 94, 94, 95, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 166, 171, 166, 166, 166, 167, 166, 166, 166, 172, 166, 166, 166, 166, 166, 166, 166, 166},
   {170, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 170, 169, 168, 170},
   {166, 166, 166, 166, 166, 168, 166, 166, 166, 166, 169, 166, 166, 166, 166, 166, 166, 166, 167, 166, 166, 166, 166, 166, 166},
   {166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 169, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166}
};

void setup() {
  size(800, 512);
  map = loadImage("map.png");
  
  tiles = new Tile[nx][ny];
  for (int y=0;y<ny;y++) {
    for (int x=0;x<nx;x++){
      int t = level0[y][x];
      tiles[x][y] = new Tile(t, x, y); 
    }
  }
  
  pc = new PC();
}

void draw() {
 animation_counter++;
 if (animation_counter==1000){
   animation_counter=0;
 }
  
 if(keyPressed){
    if(keyCode == DOWN){
      pc.go_down();
      
    }
    else if(keyCode == UP){ 
     pc.go_upp();
    }
     
     else if(keyCode == LEFT){ 
      pc.go_left();
     }
     
     else if(keyCode == RIGHT){ 
      pc.go_right();
     }
  } 
  for (int n=0;n<ny;n++) {
   for (int m=0;m<nx;m++){
      
      tiles[m][n].display(); 
    }
  }
  pc.show();
}
